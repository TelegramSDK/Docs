"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[984],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,s(s({ref:t},l),{},{components:n})):a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[d]="string"==typeof e?e:r,s[1]=p;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},s="Echo Bot",p={unversionedId:"examples/echobot",id:"examples/echobot",title:"Echo Bot",description:"Here's an example of a bot that echoes back the same message that was sent.",source:"@site/docs/examples/echobot.md",sourceDirName:"examples",slug:"/examples/echobot",permalink:"/docs/examples/echobot",draft:!1,editUrl:"https://github.com/TelegramSDK/Docs/tree/main/docs/examples/echobot.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/docs/category/examples"},next:{title:"BotKit",permalink:"/docs/kit"}},i={},c=[{value:"Getting Updates",id:"getting-updates",level:2},{value:"Webhook",id:"webhook",level:2}],l={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"echo-bot"},"Echo Bot"),(0,r.kt)("p",null,"Here's an example of a bot that echoes back the same message that was sent."),(0,r.kt)("p",null,"Remember to replace ",(0,r.kt)("inlineCode",{parentName:"p"},"YOUR_BOT_TOKEN")," with a token given by ",(0,r.kt)("a",{parentName:"p",href:"https://t.me/BotFather"},"@botfather"),"."),(0,r.kt)("h2",{id:"getting-updates"},"Getting Updates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nrequire_once  "vendor/autoload.php";\n\nuse TelegramSDK\\BotAPI\\Exception\\TelegramException;\nuse TelegramSDK\\BotAPI\\Telegram\\{Bot, Update};\n\n\ndefine("GREEN_COLOR", "\\033[0;32m");\ndefine("RED_COLOR", "\\033[0;31m");\ndefine("DEFAULT_COLOR", "\\033[0m");\n\n\n$bot = new Bot("YOUR_BOT_TOKEN", Update::UPDATES_FROM_GET_UPDATES);\n\nif(!$bot->isValidToken(true)) {\n    echo RED_COLOR . "Invalid bot token.\\n" . DEFAULT_COLOR;\n    exit(1);\n}\n\necho GREEN_COLOR . "Bot Started!\\n" . DEFAULT_COLOR;\n\nfor ( ; ; sleep(5)) {\n\n    $updates = $bot->updates(isset($updates) ? $updates->getLastUpdateId() : null);\n\n    foreach($updates->result as $update){\n        if(isset($update->message)){\n            $chat = $update->message->chat;\n\n            try {\n\n                $res = $bot->copyMessage([\n                    "chat_id" => $chat->id,\n                    "from_chat_id" => $chat->id,\n                    "message_id" => $update->message->message_id\n                ]);\n\n                echo GREEN_COLOR . "Replied to " . $chat->id . "\\n" . DEFAULT_COLOR;\n\n            } catch (TelegramException $e) {\n                echo RED_COLOR . "Coulnd\'t reply to " . $chat->id . ": " . $e->getResponseBody()->description . "\\n" . DEFAULT_COLOR;\n            }\n\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"webhook"},"Webhook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nrequire_once  "vendor/autoload.php";\n\nuse TelegramSDK\\BotAPI\\Telegram\\{Bot, Update};\n\n$bot = new Bot("YOUR_BOT_TOKEN", Update::UPDATES_FROM_WEBHOOK);\n\n$update = $bot->updates();\n\nif(isset($update->update_id)){\n\n    if(isset($update->message)){\n        $chat = $update->getChat();\n\n        $bot->copyMessage([\n            "chat_id" => $chat->id,\n            "from_chat_id" => $chat->id,\n            "message_id" => $update->getMessage()->message_id\n        ]);\n    }\n\n} else{\n    echo "No updates from telegram where found.\\n";\n}\n\n')))}u.isMDXComponent=!0}}]);