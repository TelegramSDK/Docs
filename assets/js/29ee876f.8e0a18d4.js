"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[405],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),i=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},u=function(e){var t=i(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=i(a),m=r,h=d["".concat(l,".").concat(m)]||d[m]||c[m]||o;return a?n.createElement(h,p(p({ref:t},u),{},{components:a})):n.createElement(h,p({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,p=new Array(o);p[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,p[1]=s;for(var i=2;i<o;i++)p[i]=a[i];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9113:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:2},p="Getting Updates",s={unversionedId:"usage/updates",id:"usage/updates",title:"Getting Updates",description:"As mentioned in the introduction, the Bot class provides a method to get updates.",source:"@site/docs/usage/updates.md",sourceDirName:"usage",slug:"/usage/updates",permalink:"/docs/usage/updates",draft:!1,editUrl:"https://github.com/TelegramSDK/Docs/tree/main/docs/usage/updates.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"General Information",permalink:"/docs/usage/general"},next:{title:"Translating",permalink:"/docs/usage/translating"}},l={},i=[{value:"Updates Methods",id:"updates-methods",level:2},{value:"Get Updates",id:"get-updates",level:3},{value:"Webhook",id:"webhook",level:3},{value:"Default Updates",id:"default-updates",level:2}],u={toc:i},d="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-updates"},"Getting Updates"),(0,r.kt)("p",null,"As mentioned in the introduction, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Bot")," class provides a method to get updates."),(0,r.kt)("h2",{id:"updates-methods"},"Updates Methods"),(0,r.kt)("p",null,"There are 3 updates methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Bot::NO_UPDATES"),": No updates are expected from Telegram, is set as default."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Bot::UPDATES_FROM_GET_UPDATES"),": Get updates from the ",(0,r.kt)("inlineCode",{parentName:"li"},"getUpdates()")," method."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Bot::UPDATES_FROM_WEBHOOK"),": Get updates from ",(0,r.kt)("a",{parentName:"li",href:"https://www.php.net/manual/en/wrappers.php.php#wrappers.php.input"},(0,r.kt)("inlineCode",{parentName:"a"},"php://input")),".")),(0,r.kt)("h3",{id:"get-updates"},"Get Updates"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nuse TelegramSDK\\BotAPI\\Telegram\\Bot;\n\n// With getUpdates()\n$bot = new Bot("YOUR_BOT_TOKEN", Bot::UPDATES_FROM_GET_UPDATES);\n\n$updates = $bot->updates();\nforeach($updates->result as $update){\n    echo json_encode($update) . "\\n";\n}\n')),(0,r.kt)("h3",{id:"webhook"},"Webhook"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},'<?php\nuse TelegramSDK\\BotAPI\\Telegram\\Bot;\n\n$bot = new Bot("YOUR_BOT_TOKEN", Bot::UPDATES_FROM_WEBHOOK);\n\n$update = $bot->updates();\necho (json_encode($update) ?? "No updates found.") . "\\n";\n')),(0,r.kt)("h2",{id:"default-updates"},"Default Updates"),(0,r.kt)("p",null,"The library provides general default updates to use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"$updates = $bot->updates(true);\n")),(0,r.kt)("p",null,"Here's a list of the currently available general updates:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://core.telegram.org/bots/api#message"},(0,r.kt)("inlineCode",{parentName:"a"},"msg")),": The sent message."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://core.telegram.org/bots/api#user"},(0,r.kt)("inlineCode",{parentName:"a"},"user")),": The user that performed the action."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://core.telegram.org/bots/api#chat"},(0,r.kt)("inlineCode",{parentName:"a"},"chat")),": The chat where the action was performed.")))}c.isMDXComponent=!0}}]);