"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[450],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>h});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),l=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=l(a),m=o,h=c["".concat(i,".").concat(m)]||c[m]||u[m]||r;return a?n.createElement(h,s(s({ref:t},d),{},{components:a})):n.createElement(h,s({ref:t},d))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,s=new Array(r);s[0]=m;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[c]="string"==typeof e?e:o,s[1]=p;for(var l=2;l<r;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2521:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var n=a(7462),o=(a(7294),a(3905));const r={sidebar_position:1},s="Echo Bot",p={unversionedId:"examples/echo-bot",id:"examples/echo-bot",title:"Echo Bot",description:"Here's an example of a bot that echoes back the same message that was sent.",source:"@site/docs/examples/echo-bot.md",sourceDirName:"examples",slug:"/examples/echo-bot",permalink:"/docs/examples/echo-bot",draft:!1,editUrl:"https://github.com/TelegramSDK/Docs/tree/main/docs/examples/echo-bot.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/docs/category/examples"}},i={},l=[{value:"Getting Updates",id:"getting-updates",level:2},{value:"How does it work?",id:"how-does-it-work",level:3},{value:"Webhook",id:"webhook",level:2},{value:"How does it work?",id:"how-does-it-work-1",level:3}],d={toc:l},c="wrapper";function u(e){let{components:t,...a}=e;return(0,o.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"echo-bot"},"Echo Bot"),(0,o.kt)("p",null,"Here's an example of a bot that echoes back the same message that was sent."),(0,o.kt)("p",null,"Remember to replace ",(0,o.kt)("inlineCode",{parentName:"p"},"YOUR_BOT_TOKEN")," with a token given by ",(0,o.kt)("a",{parentName:"p",href:"https://t.me/BotFather"},"@botfather"),"."),(0,o.kt)("h2",{id:"getting-updates"},"Getting Updates"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'<?php\ndefine("PRODUCTION", false);\nrequire_once "vendor/autoload.php";\n\ndefine("GREEN_TEXT", "\\033[0;32m");\ndefine("RED_TEXT", "\\033[0;31m");\ndefine("DEFAULT_TEXT", "\\033[0m");\n\nuse TelegramSDK\\BotAPI\\Telegram\\Bot;\n$bot = new Bot("YOUR_BOT_TOKEN", Bot::UPDATES_FROM_GET_UPDATES);\n\necho GREEN_TEXT . "Bot Started!\\n" . DEFAULT_TEXT;\n\nwhile(true){\n    $updates = $bot->updates(true, $updates->lastUpdateID ?? null);\n\n    foreach($updates->result as $update){\n        if(isset($update->message)){\n            $res = $bot->copyMessage([\n                "chat_id" => $update->chat->id,\n                "from_chat_id" => $update->chat->id,\n                "message_id" => $update->message->message_id\n            ]);\n\n            if($res->body->ok){\n                echo GREEN_TEXT . "Replied to " . $update->chat->id . "\\n" . DEFAULT_TEXT;\n            } else{\n                echo RED_TEXT . "Coulnd\'t reply to " . $update->chat->id . ": " . $res->body->error . "\\n" . DEFAULT_TEXT;\n            }\n        }\n    }\n\n    sleep(5);\n}\n')),(0,o.kt)("h3",{id:"how-does-it-work"},"How does it work?"),(0,o.kt)("p",null,"We're creating a new instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"TelegramSDK\\BotAPI\\Telegram\\Bot"),", passing the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bot::UPDATES_FROM_GET_UPDATES")," as the form of updates"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'$bot = new Bot("YOUR_BOT_TOKEN", Bot::UPDATES_FROM_GET_UPDATES);\n')),(0,o.kt)("p",null,"Then the program creates an infinite loop to get the new updates, ",(0,o.kt)("inlineCode",{parentName:"p"},"$updates->lastUpdateID")," is the offset of the update, set by the last ",(0,o.kt)("inlineCode",{parentName:"p"},"$bot->updates()")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"null")," if its not set.\n",(0,o.kt)("em",{parentName:"p"},"See ",(0,o.kt)("a",{parentName:"em",href:"/docs/usage/updates"},"Getting Updates")," for detailed information.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"while(true){\n    $updates = $bot->updates(true, $updates->lastUpdateID ?? null);\n}\n")),(0,o.kt)("p",null,"The next step is to iterate through the array of updates and check if a message was sent."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"foreach($updates->result as $update){\n    if(isset($update->message)) // A message was sent\n}\n")),(0,o.kt)("p",null,"If a message is sent we simply copy it and send it to the same user.\n",(0,o.kt)("em",{parentName:"p"},"See the ",(0,o.kt)("a",{parentName:"em",href:"https://core.telegram.org/bots/api#copymessage"},"copyMessage")," method.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'$res = $bot->copyMessage([ // Copying the message\n    "chat_id" => $update->chat->id,\n    "from_chat_id" => $update->chat->id,\n    "message_id" => $update->message->message_id\n]);\n\nif($res->body->ok){ // The message was sent\n    echo GREEN_TEXT . "Replied to " . $update->chat->id . "\\n" . DEFAULT_TEXT;\n} else{ // The message coulnd\'t be sent\n    echo RED_TEXT . "Coulnd\'t reply to " . $update->chat->id . ": " . $res->body->error . "\\n" . DEFAULT_TEXT;\n}\n')),(0,o.kt)("p",null,"The last step is to wait 5 seconds before checking for new updates to avoid being timed out by telegram."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"sleep(5);\n")),(0,o.kt)("h2",{id:"webhook"},"Webhook"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'<?php\ndefine("PRODUCTION", false);\nrequire_once "vendor/autoload.php";\n\nuse TelegramSDK\\BotAPI\\Telegram\\Bot;\n\n$bot = new Bot("YOUR_BOT_TOKEN", Bot::UPDATES_FROM_WEBHOOK);\n\n$update = $bot->updates(true);\n\nif(isset($update->update_id)){\n\n    if(isset($update->message)){\n        $bot->copyMessage([\n            "chat_id" => $update->chat->id,\n            "from_chat_id" => $update->chat->id,\n            "message_id" => $update->message->message_id\n        ]);\n    }\n\n} else{\n    echo "No updates from telegram where found.\\n";\n}\n')),(0,o.kt)("h3",{id:"how-does-it-work-1"},"How does it work?"),(0,o.kt)("p",null,"We're creating a new instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"TelegramSDK\\BotAPI\\Telegram\\Bot"),", passing the ",(0,o.kt)("inlineCode",{parentName:"p"},"Bot::UPDATES_FROM_WEBHOOK")," as the form of updates"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'$bot = new Bot("YOUR_BOT_TOKEN", Bot::UPDATES_FROM_WEBHOOK);\n')),(0,o.kt)("p",null,"Then we check if there is a telegram update."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"$update = $bot->updates(true);\n\nif(isset($update->update_id)){} // There should be an update from Telegram\n")),(0,o.kt)("p",null,"If a message is sent we simply copy it and send it to the same user.\n",(0,o.kt)("em",{parentName:"p"},"See the ",(0,o.kt)("a",{parentName:"em",href:"https://core.telegram.org/bots/api#copymessage"},"copyMessage")," method.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},'if(isset($update->message)){\n    $bot->copyMessage([ // Copying the message\n        "chat_id" => $update->chat->id,\n        "from_chat_id" => $update->chat->id,\n        "message_id" => $update->message->message_id\n    ]);\n}\n')))}u.isMDXComponent=!0}}]);